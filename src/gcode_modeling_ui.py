# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gcode_modeling.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtPrintSupport import *
from pyqtgraph import opengl
from pyqtgraph.parametertree import ParameterTree

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.resize(1400, 800)
        MainWindow.setObjectName("MainWindow")
        self.left_pane_setting(MainWindow)

        self.cetral_pane_setting(MainWindow)

        self.right_pane_setting(MainWindow)


        self.splitter = QSplitter()
        self.splitter.setOrientation(Qt.Horizontal)
        self.splitter.addWidget(QWidget())
        self.splitter.addWidget(QWidget())
        self.splitter.addWidget(QWidget())
        self.splitter.widget(0).setLayout(self.left_pane_layout)
        self.splitter.widget(1).setLayout(self.central_layout)
        self.splitter.widget(2).setLayout(self.right_layout)
        self.splitter.setSizes([100, 600, 220])

        self.main_layout = QVBoxLayout()
        self.main_layout.addWidget(self.splitter)
        central_widget = QWidget(MainWindow)
        central_widget.setLayout(self.main_layout)
        MainWindow.setCentralWidget(central_widget)
        
        MainWindow.setWindowTitle('Splitter with handle')
        self.retranslateUi(MainWindow)
        self.signal_connecter(MainWindow)

        
    
    def left_pane_setting(self,MainWindow):

        self.open_button = QtWidgets.QPushButton(MainWindow)
        self.open_button.setObjectName("open_button")
        self.save_button = QtWidgets.QPushButton(MainWindow)
        self.save_as_button = QtWidgets.QPushButton(MainWindow)
        self.button_horizontal_layout =  QtWidgets.QHBoxLayout()# ボタン用のレイアウト
        self.button_horizontal_layout.addWidget(self.open_button)
        self.button_horizontal_layout.addWidget(self.save_button)
        self.button_horizontal_layout.addWidget(self.save_as_button)

        self.editor = PlainTextEdit(MainWindow)
        self.editor.setLineWrapMode(PlainTextEdit.LineWrapMode.NoWrap)
        self.reload_button = QtWidgets.QPushButton(MainWindow)
        
        self.editor_button_layout = QtWidgets.QVBoxLayout()
        self.editor_button_layout.addLayout(self.button_horizontal_layout)
        self.editor_button_layout.addWidget(self.editor)
        self.editor_button_layout.addWidget(self.reload_button)

        self.message_console = QtWidgets.QTextEdit(MainWindow)
        self.message_console.setMinimumHeight(10)

        self.left_pane_widget = QWidget(MainWindow)
        self.message_splitter = QSplitter()
        self.message_splitter.setOrientation(Qt.Vertical)#splitterの方向を横に設定
        self.message_splitter.addWidget(QWidget())
        self.message_splitter.widget(0).setLayout(self.editor_button_layout)
        self.message_splitter.addWidget(self.message_console)
        self.message_splitter.setSizes([10,1])
        
        self.left_pane_layout = QVBoxLayout()
        self.left_pane_layout.addWidget(self.message_splitter)

    def cetral_pane_setting(self, MainWindow):
        self.graphicsView = opengl.GLViewWidget(MainWindow)
        self.segment_button_layout = QtWidgets.QHBoxLayout()
        self.slider_segment =  QtWidgets.QSlider(MainWindow)
        self.slider_segment.setOrientation(QtCore.Qt.Horizontal)
        self.left_button = QtWidgets.QToolButton(MainWindow)
        self.right_button = QtWidgets.QToolButton(MainWindow)
        self.segment_button_layout.addWidget(self.slider_segment)
        self.segment_button_layout.addWidget(self.left_button)
        self.segment_button_layout.addWidget(self.right_button)

        self.graphic_seg_layout =  QtWidgets.QVBoxLayout()
        self.graphic_seg_layout.addWidget(self.graphicsView)
        self.graphic_seg_layout.addLayout(self.segment_button_layout)


        self.layer_button_layout = QtWidgets.QVBoxLayout()
        self.slider_layer =  QtWidgets.QSlider(MainWindow)
        self.slider_layer.setOrientation(QtCore.Qt.Vertical)
        self.up_button = QtWidgets.QToolButton(MainWindow)
        self.down_button = QtWidgets.QToolButton(MainWindow)
        self.layer_button_layout.addWidget(self.slider_layer)
        self.layer_button_layout.addWidget(self.up_button)
        self.layer_button_layout.addWidget(self.down_button)

        self.central_layout =  QtWidgets.QHBoxLayout()
        self.central_layout.addLayout(self.graphic_seg_layout)
        self.central_layout.addLayout(self.layer_button_layout)

    def right_pane_setting(self, MainWindow):
        self.parameter_tree = ParameterTree(MainWindow)
        self.gcode_export_button = QtWidgets.QPushButton(MainWindow)
        self.right_layout = QtWidgets.QVBoxLayout()
        self.right_layout.addWidget(self.parameter_tree)
        self.right_layout.addWidget(self.gcode_export_button)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.open_button.setText(_translate("MainWindow", "       Open File       "))
        self.save_button.setText(_translate("MainWindow", "Save"))
        self.save_as_button.setText(_translate("MainWindow", "Save As"))
        self.reload_button.setText(_translate("MainWindow", "reload"))
        self.left_button.setText(_translate("MainWindow", "..."))
        self.right_button.setText(_translate("MainWindow", "..."))
        self.up_button.setText(_translate("MainWindow", "..."))
        self.down_button.setText(_translate("MainWindow", "..."))
        self.gcode_export_button.setText(_translate("MainWindow", "Gcode Export"))
    
    def signal_connecter(self, MainWindow):
        self.open_button.pressed.connect(MainWindow.file_open) # type: ignore
        self.save_button.pressed.connect(MainWindow.file_save) # type: ignore
        self.save_as_button.pressed.connect(MainWindow.file_save_as) # type: ignore
        self.reload_button.pressed.connect(MainWindow.save_as_modeling) # type: ignore
        self.reload_button.pressed.connect(MainWindow.draw_updated_object) # type: ignore
        self.gcode_export_button.pressed.connect(MainWindow.Gcode_create) # type: ignore
        self.slider_layer.valueChanged['int'].connect(MainWindow.redraw_layer_object) # type: ignore
        self.up_button.pressed.connect(MainWindow.up_button_pressed) # type: ignore
        self.down_button.pressed.connect(MainWindow.down_button_pressed) # type: ignore
        self.slider_segment.valueChanged['int'].connect(MainWindow.redraw_segment_object) # type: ignore
        self.left_button.pressed.connect(MainWindow.left_button_pressed) # type: ignore
        self.right_button.pressed.connect(MainWindow.right_button_pressed) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
class PlainTextEdit(QPlainTextEdit):
    '''def __init__(self):
        shortcut = QShortcut(QKeySequence(Qt.ShiftModifier + Qt.Key_Tab), self)
        shortcut.activated.connect(self.on_shortcut_activated)'''
    def keyPressEvent(self, event):
        #オートインデントの処理
        if event.key() in (Qt.Key_Return, Qt.Key_Enter):

            indent_width = 4
            line_number = self.textCursor().blockNumber()
            #print(line_number)
            line_text = self.document().findBlockByLineNumber(line_number).text()
            indent_level = line_text.count(" " * indent_width)
            if line_text.endswith(":"):
                indent_level += 1
            self.insertPlainText("\n")
            self.insertPlainText( " " * indent_width * indent_level)
            return
        
        if event.key() == Qt.Key_Tab:
            self.indent()
            return
            
        if event.key() == Qt.Key_Backtab:  # Shift + Tabの場合はQt.Key_Backtabを使う
            if event.modifiers() == Qt.ShiftModifier:  # Shiftが同時に押されているかをチェック
                self.unindent()
                return
        

        super(PlainTextEdit, self).keyPressEvent(event)


    def indent(self):
        if not self.textCursor().hasSelection():
            self.insertPlainText(" " * 4)
        # 選択範囲がある場合は選択範囲内の各行の先頭にインデントを挿入
        else:
            # 選択範囲の開始と終了行番号を取得
            start = self.textCursor().selectionStart()
            end = self.textCursor().selectionEnd()
            start_block = self.document().findBlock(start).blockNumber()
            end_block = self.document().findBlock(end).blockNumber()
            # 選択範囲の各行に対して処理を行う
            for block_number in range(start_block, end_block + 1):
                block = self.document().findBlockByNumber(block_number)
                cursor = self.textCursor()
                cursor.setPosition(block.position())
                cursor.movePosition(QTextCursor.StartOfLine)
                cursor.insertText(" " * 4)

    def unindent(self):
        start = self.textCursor().selectionStart()
        end = self.textCursor().selectionEnd()
        start_block = self.document().findBlock(start).blockNumber()
        end_block = self.document().findBlock(end).blockNumber()

        # 選択範囲の各行に対して処理を行う
        for block_number in range(start_block, end_block + 1):
            block = self.document().findBlockByNumber(block_number)
            cursor = self.textCursor()
            cursor.setPosition(block.position())
            cursor.movePosition(QTextCursor.StartOfLine)

            # スペースをアンインデントする
            line_text = block.text()
            if len(line_text) > 4 and line_text.startswith(" " * 4):
                cursor.movePosition(QTextCursor.Right, QTextCursor.KeepAnchor, 4)
                cursor.removeSelectedText()
            elif line_text.startswith(" "):
                cursor.movePosition(QTextCursor.Right, QTextCursor.KeepAnchor, 1)
                cursor.removeSelectedText()
